<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://bulhwi.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mm225012@gmail.com (pbh)</managingEditor>
    <webMaster>mm225012@gmail.com (pbh)</webMaster>
    <lastBuildDate>Sun, 11 Oct 2020 15:48:55 +0900</lastBuildDate><atom:link href="https://bulhwi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[ES6] JavaScript 함수 선언 유형, Promise, 클로저(Closure), 커링(Currying)</title>
      <link>https://bulhwi.github.io/es6-promise-closure-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EB%B0%A9%EC%8B%9D-%EC%BB%A4%EB%A7%81/</link>
      <pubDate>Sun, 11 Oct 2020 15:48:55 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/es6-promise-closure-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EB%B0%A9%EC%8B%9D-%EC%BB%A4%EB%A7%81/</guid>
      <description>JavaScript 함수 선언 유형. 1 2 3 4 5 6 7 8 9 10 11 12 13 function foo() {} //일반적인 선언 const bar = function(){} // 함수도 객체로 취급이 되기때문에 변수에 할당이 가능하다 // 즉시 호출되는 펑션에 선언방식. // 브라우저에 의해 js가 로딩되면 최초 1번 호출되는 콜백 펑션임. (function(){ console.log(&amp;#39;IIFE&amp;#39;) })(); // ES6부터 지원하는 화살표 함수. const bar = (x) =&amp;gt; x * 2; const bar = (x) =&amp;gt; {return 0;}; JavaScript 비동기적 프로그래밍(Promise, Async, await) 콜백지옥의 단점(중첩된 중괄호, 예외처리의 어려움등등등)을 해결하려는 시도속에서 만들어진 Promise는 비교적으로 안전하고 관리하기 쉬운 코드 구조를 가지지만 번거롭다는 평가도 있었다고 한다.</description>
    </item>
    
    <item>
      <title>[ES6] Spread 연산자, Rest 파라미터, Array Like</title>
      <link>https://bulhwi.github.io/es6-spread-%EC%97%B0%EC%82%B0%EC%9E%90-rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-array-like/</link>
      <pubDate>Tue, 15 Sep 2020 00:31:05 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/es6-spread-%EC%97%B0%EC%82%B0%EC%9E%90-rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-array-like/</guid>
      <description>Spread 연산자. Spread 연산자(&amp;hellip;)는 이터러블 오브젝트의 엘리먼트를 하나씩 분리하여 전개한다. 전개한 결과를 변수에 할당하거나 호출하는 함수의 파라미터 값으로 사용할 수 있다. 1 2 3 //EX [...iterableObject] function(...iterableObject) 1 2 3 4 5 6 7 8 let one = [11, 12]; let two = [21, 22]; let spreadObj = [51, ...one, 52, ...two]; console.log(spreadObj); //[51, 11, 12, 52, 21, 22] console.log(spreadObj.length); //6 let spreadTxt = [...&amp;#34;string&amp;#34;]; console.log(spreadTxt); //[&amp;#34;s&amp;#34;, &amp;#34;t&amp;#34;, &amp;#34;r&amp;#34;, &amp;#34;i&amp;#34;, &amp;#34;n&amp;#34;, &amp;#34;g&amp;#34;] 함수 파라미터.</description>
    </item>
    
    <item>
      <title>SpringBoot &#43; JUnit 단위테스트</title>
      <link>https://bulhwi.github.io/springboot--junit-%EB%8B%A8%EC%9C%84%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
      <pubDate>Sun, 31 May 2020 22:15:11 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/springboot--junit-%EB%8B%A8%EC%9C%84%ED%85%8C%EC%8A%A4%ED%8A%B8/</guid>
      <description>Spring Boot + JUnit 단위테스트 환경 intelliJ springBoot(devtools, web-starter, lombok) 프로젝트를 생성하면 pom.xml에 기본적으로 &amp;lsquo;spring-boot-starter-test&amp;rsquo;의존성이 추가된 것을 확인할 수 있다.
1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 기본 테스트 클래스 &amp;lsquo;src/test/java&amp;rsquo; 경로에 기본적인 테스트 클래스가 제공된다.
@RunWith(SpringRunner.class) - Junit에서 기본으로 제공하는 러너가 아닌 스프링 러너를 사용하기 위해 추가. @SpringBootTest - 테스트케이스가 실행될 때 테스트에 필요한 설정과 빈들을 자동으로 초기화하는 역할을 수행. 목객체로 테스트 케이스 만들기 @WebMvcTest 사용. 웹어플리케이션에서 Controller를 테스트할 때, @WebMvcTest를 사용하거나, @AutoConfigureMockMvc를 사용한다.</description>
    </item>
    
    <item>
      <title>VueJS에서 제공하는 단계적영역</title>
      <link>https://bulhwi.github.io/vuejs%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%8B%A8%EA%B3%84%EC%A0%81%EC%98%81%EC%97%AD/</link>
      <pubDate>Mon, 25 May 2020 01:23:21 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/vuejs%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%8B%A8%EA%B3%84%EC%A0%81%EC%98%81%EC%97%AD/</guid>
      <description>VueJS에서 제공하는 단계적 영역. VueJS는 다음과 같은 단계적인 영역의 기능을 제공한다. 각 단계의 기능들이 어떻게 제공되는지 정리. 기본적으로 VueJS에서 설명하는 단계적 영역. 선언적 렌더링 컴포넌트 시스템 클라이언트 사이드 렌더링 대규모 어플리케이션 상태관리 빌드 시스템 데이터 퍼시스턴스 선언적 렌더링 HTML 템플릿에 렌더링 대상을 선언적으로 기술해 데이터가 변경될 때마다 DOM을 반응적으로 렌더링하고 사용자 입력 데이터를 동기화 할 수 있다.
컴포넌트 시스템 UI를 모듈화하여 재사용할 수 있게 해준다.
클라이언트 사이드 라우팅 단일 페이지 어플리케이션이 동작하기 위해 필요한 영역으로 URL설계, 지시와 같이 Vue Router를 사용하여 구현할 수 있다.</description>
    </item>
    
    <item>
      <title>SpringBoot VueJS 연동</title>
      <link>https://bulhwi.github.io/springboot-vuejs-%EC%97%B0%EB%8F%99/</link>
      <pubDate>Mon, 25 May 2020 01:10:05 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/springboot-vuejs-%EC%97%B0%EB%8F%99/</guid>
      <description>Spring Boot + VueJS 연동하기. Spring boot와 VueJS를 사용하여 프로젝트를 진행할때 기본 구성방법을 정리한다.
Spring boot 프로젝트 생성 IDE를 이용하여 springBoot 프로젝트를 생성하여 준다. 기본값인 Maven + SpringBoot로 생성하였다.
VueJS 프로젝트 구성하기. 프로젝트 루트경로에 &amp;lsquo;frontend&amp;rsquo; 폴더를 생성하고 그하위에 vueJS 프로젝트를 구성할것이다. vue-cli3, vuex, vue-router까지 진행. 1 2 3 4 $ mkdir frontend $ cd forntend $ npm install -g @vue/cli $ vue create ui --no-git springBoot 프로젝트의 루트경로에서 frontend 디렉토리를 만들고, frontend 디렉토리에서 vue-cli를 install 받은 후 vue 프로젝트를 생성한다.</description>
    </item>
    
    <item>
      <title>Jetbrains 웹스톰 NPM 연동하기</title>
      <link>https://bulhwi.github.io/jetbrains-%EC%9B%B9%EC%8A%A4%ED%86%B0-npm-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 25 May 2020 01:06:18 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/jetbrains-%EC%9B%B9%EC%8A%A4%ED%86%B0-npm-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/</guid>
      <description>웹스톰에서 NPM 연동하기. 프론트엔드 개발 툴로 사용중인 웹스톰에서 NPM을 연동하여 &amp;lsquo;ctrl + shift + f10&amp;rsquo; 단축기로 간단하게 실행 할수있다.
1. package.json 설정 방법. 1 2 3 4 5 6 &amp;#34;scripts&amp;#34;: { &amp;#34;build&amp;#34;: &amp;#34;hexo generate --deploy&amp;#34;, &amp;#34;clean&amp;#34;: &amp;#34;hexo clean&amp;#34;, &amp;#34;deploy&amp;#34;: &amp;#34;hexo deploy&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;hexo server&amp;#34; }, &amp;rsquo;npm run ***&amp;lsquo;으로 위에서 정의된 명령어를 사용할 수 있다. hexo에서 사용가능한 명령어를 설정하였다.
2. Add Configuration 클릭. 이미지에서 처럼 &amp;lsquo;package.json&amp;rsquo;파일의 경로를 잡아주고 Scripts항목에 &amp;lsquo;package.json&amp;rsquo;파일에서 설정한 명령어들을 넣어주면 &amp;lsquo;ctrl + shift + f10&amp;rsquo;단축키로 편하게 작업이 가능해진다.</description>
    </item>
    
    <item>
      <title>Webpack 기본 설정 정리</title>
      <link>https://bulhwi.github.io/webpack-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 25 May 2020 00:30:53 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/webpack-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95-%EC%A0%95%EB%A6%AC/</guid>
      <description>webpack 웹팩이란 웹 애플리케이션 개발단계에서 발생하는 자원들을 각각의 모듈로 정의하고 병합된 하나의 결과물로 만드는 빌드 도구이다.
환경구성 nodejs LTS version npm
프로젝트 루트경로에서 명령어실행.
1 $ npm init -y 생성된 package.json
1 2 3 4 5 6 7 8 9 10 11 12 { &amp;#34;name&amp;#34;: &amp;#34;demo&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34; }, &amp;#34;keywords&amp;#34;: [], &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34; } entry entry속성에서는 웹자원을 변환하기 위한 js,css 등 파일의 기본설정을 할 수 있다.</description>
    </item>
    
    <item>
      <title>Git 계정 설정</title>
      <link>https://bulhwi.github.io/git-%EA%B3%84%EC%A0%95-%EC%84%A4%EC%A0%95/</link>
      <pubDate>Mon, 25 May 2020 00:28:01 +0900</pubDate>
      <author>mm225012@gmail.com (pbh)</author>
      <guid>https://bulhwi.github.io/git-%EA%B3%84%EC%A0%95-%EC%84%A4%EC%A0%95/</guid>
      <description>git 계정 설정. 1 2 $ git config --global user.name &amp;#34;name&amp;#34; $ git config --global user.email name@example.com &amp;lsquo;&amp;ndash;global&amp;rsquo; 은 전역 설정 &amp;lsquo;&amp;ndash;local&amp;rsquo; 은 프로젝트내 설정 git 설정 내용 보기. 1 $ git config --list 참고 : git book</description>
    </item>
    
  </channel>
</rss>
